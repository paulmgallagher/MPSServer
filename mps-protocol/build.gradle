buildscript {
    ext.kotlinVersion = '1.4.0'

    repositories {
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.googlejavaformat:google-java-format:1.8+'
    }
}

plugins {
    id 'maven-publish'
    id "java-library"
    id 'jacoco'
    id "org.jetbrains.kotlin.multiplatform" version "1.4.0"
    id "org.jlleitschuh.gradle.ktlint" version "9.3.0"
    id "com.diffplug.gradle.spotless" version "4.5.1"
    id "com.jfrog.bintray" version "1.8.5"
}

configurations {
    ktlint
}

repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
    mavenCentral()
    mavenLocal()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

check.dependsOn ktlintCheck

kotlin {
    jvm()
    js {
        //browser {}
        nodejs {
            testTask {
                useMocha {
                    timeout = 10000
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

tasks.jacocoTestReport {

    classDirectories.setFrom("${buildDir}/classes/kotlin/jvm/")
    sourceDirectories.setFrom(files("src/commonMain/kotlin", "src/jvmMain/kotlin"))

    executionData.setFrom(files("${buildDir}/jacoco/jvmTest.exec"))

    reports {
        xml.enabled true
        html.enabled true
    }
}

spotless {
    kotlin {
        licenseHeader '/*\n' +
                ' * Licensed under the Apache License, Version 2.0 (the "License");\n' +
                ' * you may not use this file except in compliance with the License.\n' +
                ' * You may obtain a copy of the License at\n' +
                ' *\n' +
                ' *  http://www.apache.org/licenses/LICENSE-2.0\n' +
                ' *\n' +
                ' * Unless required by applicable law or agreed to in writing,\n' +
                ' * software distributed under the License is distributed on an\n' +
                ' * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n' +
                ' * KIND, either express or implied.  See the License for the\n' +
                ' * specific language governing permissions and limitations\n' +
                ' * under the License. \n' +
                ' */\n' +
                '\n'
    }
}

task copyModelClientToMps(type: Sync) {
    from configurations.jvmDefault
    from "$buildDir/libs"
    into "$projectDir/../mpscode/solutions/com.strumenta.mpsserver.server/libs"
    rename { fileName ->
        stripVersion(fileName)
    }
    exclude 'mps-protocol-js.jar'
    exclude 'annotations*.jar'
}

assemble.finalizedBy(copyModelClientToMps)

String stripVersion(String fileNameWithVersion) {
    return fileNameWithVersion.replaceAll(/-\d+(\.\d+)*(-SNAPSHOT)?/, "")
}
